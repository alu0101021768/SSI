#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

int filas = 4;
int columnas = 4;
// VARIABLES
vector<int> clave = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};

vector<int> bloque = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                      0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};

vector<int> estado;
vector<vector<int>> subkeys;

// Convierte un numero hexadecimal a decimal
int convert(string num) {
  int len = num.size();
  int base = 1;
  int temp = 0;
  for (int i = len - 1; i >= 0; i--) {
    if (num[i] >= '0' && num[i] <= '9') {
      temp += (num[i] - 48) * base;
      base = base * 16;
    } else if (num[i] >= 'A' && num[i] <= 'F') {
      temp += (num[i] - 55) * base;
      base = base * 16;
    }
  }
  return temp;
}

int get_SBox_Value(int num) {

  // lookup table
  vector<int> sbox = {
      0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
      0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
      0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
      0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
      0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
      0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
      0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
      0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
      0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
      0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
      0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
      0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
      0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
      0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
      0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
      0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
  return sbox[num];
}
// Encryption: Multiply by 2 for MixColumns
    vector<int> mul2 = {
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16,
    0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e,
    0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46,
    0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76,
    0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e,
    0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6,
    0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6,
    0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee,
    0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x1b, 0x19, 0x1f, 0x1d,
    0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d,
    0x23, 0x21, 0x27, 0x25, 0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55,
    0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d,
    0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d,
    0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5,
    0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 0xdb, 0xd9, 0xdf, 0xdd,
    0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed,
    0xe3, 0xe1, 0xe7, 0xe5};

// Encryption: Multiply by 3 for MixColumns
    vector<int> mul3 = {
    0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d,
    0x14, 0x17, 0x12, 0x11, 0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39,
    0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 0x60, 0x63, 0x66, 0x65,
    0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
    0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d,
    0x44, 0x47, 0x42, 0x41, 0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9,
    0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 0xf0, 0xf3, 0xf6, 0xf5,
    0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
    0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd,
    0xb4, 0xb7, 0xb2, 0xb1, 0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99,
    0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 0x9b, 0x98, 0x9d, 0x9e,
    0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
    0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6,
    0xbf, 0xbc, 0xb9, 0xba, 0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2,
    0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 0xcb, 0xc8, 0xcd, 0xce,
    0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
    0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46,
    0x4f, 0x4c, 0x49, 0x4a, 0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62,
    0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 0x3b, 0x38, 0x3d, 0x3e,
    0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
    0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16,
    0x1f, 0x1c, 0x19, 0x1a};

    vector<int> Rcon = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10,
                                     0x20, 0x40, 0x80, 0x1b, 0x36};

    // xtime is a macro that finds the product of {02} and the argument to
    // xtime modulo {1b}
    #define xtime(x) ((x << 1) ^ (((x >> 7) & 1) * 0x1b))

    //  Multiplicando una matriz por los cuatro bytes de cada columna, operando
    //  con bytes.
    void mixSingleColumn(vector<int> &r) {
     vector<int> a(4) , b(4);
    int c, h;
      /* The array 'a' is simply a copy of the input array 'r'
       * The array 'b' is each element of the array 'a' multiplied by 2
       * in Rijndael's Galois field
       * a[n] ^ b[n] is element n multiplied by 3 in Rijndael's Galois field */
      for (c = 0; c < 4; c++) {
        a[c] = r[c];
        /* h is 0xff if the high bit of r[c] is set, 0 otherwise */
        h = r[c] & 0x80;  /* arithmetic right shift, thus shifting in
                                    either zeros or ones */
        b[c] = r[c] << 1; 
        if (h == 0x80) 
          b[c] ^= 0x11b; /* Rijndael's Galois field */
      }
      r[0] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1]; /* 2 * a0 + a3 + a2 + 3 * a1 */
      r[1] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2]; /* 2 * a1 + a0 + a3 + 3 * a2 */
      r[2] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3]; /* 2 * a2 + a1 + a0 + 3 * a3 */
      r[3] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0]; /* 2 * a3 + a2 + a1 + 3 * a0 */
    }

void MixColumn(vector<int> &estado) {
  vector<int> temp(4);
  for (int i = 0; i < 4; ++i) {
    for (int j = 0; j < 4; ++j) {
      temp[j] =estado[i * 4 + j];  // place the current state column in temp
    }
    mixSingleColumn(temp);  // mix it using the wiki implementation
    for (int j = 0; j < 4; ++j) {
      estado[i * 4 + j] = temp[j];  // when the column is mixed, place it back
                              // into the state
    }
  }
}
// Realizamos una xor entre la clave y el bloque originales
vector<int> addRoundKey(vector<int> key, vector<int> bloque) {
  vector<int> resultado(16);
  for (int i = 0; i < 16; i++) {
    resultado[i] = key[i] ^ bloque[i];
  }
  return resultado;
}

//
void SubBytes(vector<int> &estado) {
  for (int i = 0; i < 16; i++)
   estado[i] = get_SBox_Value(estado[i]);
}

// Shiftea las filas tantas veces como su valor de fila del 0-3
void ShiftRow(vector<int> &estado) {
  int aux;
  // Primera fila
  aux = estado[1];
  estado[1] = estado[5];
  estado[5] = estado[9];
  estado[9] = estado[13];
  estado[13] = aux;
  // Segunda fila
  aux = estado[2];
  estado[2] = estado[10];
  estado[10] = aux;
  aux = estado[6];
  estado[6] = estado[14];
  estado[14] = aux;
  // Tercera fila
  aux = estado[3];
  estado[3] = estado[15];
  estado[15] = estado[11];
  estado[11] = estado[7];
  estado[7] = aux;
}
void RotWord(vector<int> &key) {
  key[13] = key[14];
  key[14] = key[15];
  key[15] = key[12];
  key[12] = key[13];
}

void SubWord(vector<int> &key) {
  key[12] = get_SBox_Value(key[12]);
  key[13] = get_SBox_Value(key[13]);
  key[14] = get_SBox_Value(key[14]);
  key[15] = get_SBox_Value(key[15]);
}

// Write
ostream &write(ostream &os, vector<int> v) {
  os << "[";
  for (int i = 0; i < 16; i++) {
    os << hex << v[i];
    if (i != 15) os << ", ";
  }
  os << "]\n";
}

void keyExpansion(vector<int> key) {
  subkeys.resize(11);
  subkeys[0] = key;
  vector<int> aux(16);
  for (int i = 1; i <= 10; i++) {
    vector<int> lastkey = subkeys[i - 1];
    RotWord(lastkey);
    SubWord(lastkey);
    // Primera columna de subkey nueva
    aux[0] = lastkey[0] ^ lastkey[12] ^ Rcon[i];
    aux[1] = lastkey[1] ^ lastkey[13] ^ 0x00;
    aux[2] = lastkey[2] ^ lastkey[14] ^ 0x00;
    aux[3] = lastkey[3] ^ lastkey[15] ^ 0x00;
    // Segunda columna de subkey nueva
    aux[4] = aux[0] ^ subkeys[i - 1][4];
    aux[5] = aux[1] ^ subkeys[i - 1][5];
    aux[6] = aux[2] ^ subkeys[i - 1][6];
    aux[7] = aux[3] ^ subkeys[i - 1][7];
    // Tercera columna de subkey nueva
    aux[8] = aux[4] ^ subkeys[i - 1][8];
    aux[9] = aux[5] ^ subkeys[i - 1][9];
    aux[10] = aux[6] ^ subkeys[i - 1][10];
    aux[11] = aux[7] ^ subkeys[i - 1][11];
    // Cuarta columna de subkey nueva
    aux[12] = aux[8] ^ subkeys[i - 1][12];
    aux[13] = aux[9] ^ subkeys[i - 1][13];
    aux[14] = aux[10] ^ subkeys[i - 1][14];
    aux[15] = aux[11] ^ subkeys[i - 1][15];
    subkeys[i] = aux;
  }
  for (int i = 0; i < subkeys.size(); i++) {
    cout << "Clave " << i << " : ";
    write(cout , subkeys[i]);
  }
}



int main() {
  cout << "-------------------------------------------\n";
  cout << "Práctica 7 - Algoritmo de Rjindael\n";
  cout << "-------------------------------------------\n";
  cout << "Clave: ";
  write(cout, clave);
  cout << "Bloque de texto original: ";
  write(cout, bloque);
  /***************
   * ETAPA INICIAL
   **************/
  // Expandimos la clave
  keyExpansion(clave);
  cout << "\nSubClave 0 : ";
  write(cout, clave);
  // Calculamos el estado intermedio 1 : Xor entre clave y bloque
  cout << "\nEstado intermedio 0 : ";
  estado = addRoundKey(clave, bloque);
  write(cout, bloque);
  /**************
   * 9 ITERACIONES
   **************/
  for (int i = 1; i <= 9; i++) {
    SubBytes(estado);
    ShiftRow(estado);
    MixColumn(estado);      
    estado = addRoundKey(estado,subkeys[i]);  // Con la ultima subclave
    cout << "\nSubClave "<< i << ": ";
    write(cout , subkeys[i]);
    cout << "\nEstado intermedio " << i << ": ";
    write(cout,estado);
  }

  /**************
   * ETAPA FINAL
   **************/
  SubBytes(estado);
  ShiftRow(estado);
  addRoundKey(subkeys[10], bloque);  
  estado = addRoundKey(clave, bloque);
  cout << "\nSubClave 10 : ";
  write(cout, subkeys[10]);
  cout << "\nEstado intermedio 10 : ";
  write(cout, estado);
  vector<int> prueba = {0x19,0x3d,0xe3,0xbe,0xa0,0xf4,0xe2,0x2b,0x9a,0xc6,0x8d,0x2a,0xe9,0xf8,0x48,0x08};
  vector<int> roundk = {0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1,
                        0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05};
  cout << "Sin subbytes : ";
  write(cout , prueba);
  SubBytes(prueba);
  cout << "con subbytes : ";
  write(cout, prueba);
  cout << "con shiftRows : ";
  ShiftRow(prueba);
  write(cout, prueba);
  cout << "con mixColumns : ";
  MixColumn(prueba);
  write(cout, prueba);
  cout << "con addRounKey: ";
  prueba = addRoundKey(prueba ,roundk );
  write(cout,prueba);
  return 0;
}